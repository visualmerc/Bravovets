// Generated by CoffeeScript 1.6.1
var $, defaults, hideURLbar, root, sendBackScroll, sendScrollComplete, _docReady;

$ = jQuery;

window.debug = function(message, level) {
	if (level == null) {
		level = "debug";
	}
	if ((window.console != "undefined") && window.debug_enabled) {
		switch (level) {
			case "warn":
			level = 2;
			return console.warn(message);
			case "error":
			level = 3;
			return console.error(message);
			default:
			level = 1;
			return console.log(message);
		}
	}
};

window.register = function(eventName, namespace, handler, listenObj) {
	if (listenObj == null) {
		listenObj = jQuery.Window;
	}
	return listenObj.on(eventName + '.' + namespace, handler);
};

window.trigger = function(eventName, data, triggerObj) {
	if (triggerObj == null) {
		triggerObj = jQuery.Window;
	}
	if (data != null) {
		return triggerObj.triggerHandler(eventName, data);
	} else {
		return triggerObj.triggerHandler(eventName);
	}
};

/* --------------------------------------------
     Begin site
--------------------------------------------
*/


$ = jQuery;

sendScrollComplete = true;

sendBackScroll = true;

window.debug_enabled = true;

root = this;

defaults = {
	globalJQEasing: 'easeInQuint',
	analyticsEnabled: false,
	fadeInDuration: .4,
	fullAnimation: true
};

hideURLbar = function() {
	if (window.location.hash.indexOf('#') === -1) {
		return window.scrollTo(0, 1);
	}
};

$.Body = $('body');

$.Window = $(window);

$.Scroll = $('html');

$.MobileWebkit = $.Body.hasClass('webkit-mobile') || (navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i)) || (navigator.userAgent.match(/iPad/i));

$.MobileDevice = (navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i)) || (navigator.userAgent.match(/Android/i));

$.Tablet = navigator.userAgent.match(/iPad/i);

$.MediumScreenOrLarger = Modernizr.mq('only all and (min-width: 768px)');

$.Events = {
	KEY_ESC: 'keyEscape',
	KEY_ENTER: 'keyEnter',
	KEY_SPACE: 'keySpace',
	KEY_UP: 'keyUp',
	KEY_DOWN: 'keyDown',
	KEY_RIGHT: 'keyRight',
	KEY_LEFT: 'keyLeft',
	RESIZE: 'resizeSite',
	RESIZE_COMPLETE: 'resizeSiteComplete',
	SCROLL_COMPLETE: 'scrollComplete',
	CLICK: 'click',
	CHANGE: 'change',
	SUBMIT: 'submit',
	FOCUS: 'focus',
	BLUR: 'blur',
	BEFORE_SUBMIT: 'beforeSubmit',
	MOUSE_OVER: 'mouseover',
	MOUSE_OUT: 'mouseout',
	MOUSE_ENTER: 'mouseenter',
	MOUSE_LEAVE: 'mouseleave',
	MOUSE_DOWN: 'mousedown',
	MOUSE_UP: 'mouseup',
	SCROLL: 'scroll',
	BACK_SCROLL: 'backscroll',
	SHOWING_MENU: 'showingmenu',
	HIDING_MENU: 'hidingmenu',
	FOOTER_VISIBLE: 'footervisible',
	FOOTER_HIDDEN: 'footerhidden',
	SECTION_END: 'sectionend',
	SECTION_START: 'sectionstart',
	NEXT_PAGE: 'nextpage',
	PREVIOUS_PAGE: 'previouspage',
	CHANGE_PAGE: 'changepage',
	BANNER_ATTACHED: 'bannerattached',
	BANNER_DETACHED: 'bannerdetached',
	HEROSLIDE_CHANGE: 'heroslidechange',
	SLIDER_FULLSCREEN_ENTER: 'sliderfullscreenenter',
	SLIDER_FULLSCREEN_EXIT: 'sliderfullscreenexit'
};

$(function() {
	$.fn.Instantiate = function(settings) {
		var config;
		config = settings;
		return this.each(function(index) {
			var $me, controller_name, controller_names, _i, _instantiateController, _len, _results;
			$me = $(this);
			_instantiateController = function(controller_name) {
				if ($me[controller_name] != null) {
					return $me[controller_name](controller_name, config);
				}
			};
			controller_names = $me.data("script").split(",");
			_results = [];
			for (_i = 0, _len = controller_names.length; _i < _len; _i++) {
				controller_name = controller_names[_i];
				_results.push(_instantiateController(controller_name));
			}
			return _results;
		});
	};
	$.fn.id = function(element_id) {
		if (element_id != null) {
			$(this).attr("id", element_id);
		}
		return $(this).attr("id");
	};
	$.fn.getIndex = function() {
		var $p;
		$p = $(this).parent().children();
		return $p.index(this);
	};
	$.fn.calculateNaturalDimensions = function(onNaturalDimensionsDefined) {
		var img, naturalHeight, naturalWidth, newImg;
		img = this[0];
		naturalHeight = img.naturalHeight;
		naturalWidth = img.naturalWidth;
		if (naturalHeight) {
			return onNaturalDimensionsDefined(naturalWidth, naturalHeight);
		} else {
			newImg = new Image();
			newImg.src = img.src;
			if (newImg.complete) {
				naturalHeight = newImg.height;
				naturalWidth = newImg.width;
				return onNaturalDimensionsDefined(naturalWidth, naturalHeight);
			} else {
				return $(newImg).load(function() {
					img.naturalHeight = newImg.height;
					img.naturalWidth = newImg.width;
					return onNaturalDimensionsDefined(img.naturalWidth, img.naturalHeight);
				});
			}
		}
	};
	return $.fn.Site = function(name, defaults) {
		var config, lastScrollDirection, lastScrollTop, _createOverlay, _init, _resize, _resizeComplete, _scroll, _scrollTimeout, _setScreenSizes, _triggerBackScroll, _triggerScrollComplete;
		this.name = name;
		config = {
			parentName: this.name,
			backScrollLimit: 5
		};
		lastScrollTop = 0;
		lastScrollDirection = 1;
		_scrollTimeout = null;
		_setScreenSizes = function() {
			debug('setting screen sizes');
			return $.MediumScreenOrLarger = Modernizr.mq('only all and (min-width: 768px)');
		};
		_resize = function(evt) {
			var _resizeCallback;
			$.Window.windowWidth = $.Window.width();
			$.Window.windowHeight = $.Window.height();
			$.Window.trigger($.Events.RESIZE);
			clearTimeout(this.resizeTimer);
			_resizeCallback = function() {
				clearTimeout(this.resizeTimer);
				return _resizeComplete();
			};
			return this.resizeTimer = setTimeout(_resizeCallback, 500);
		};
		_resizeComplete = function() {
			$.Window.windowWidth = $.Window.width();
			$.Window.windowHeight = $.Window.height();
			$.Window.triggerHandler($.Events.RESIZE_COMPLETE);
			return $.MediumScreenOrLarger = Modernizr.mq('only all and (min-width: 768px)');
		};
		_triggerScrollComplete = function(scrollData) {
			clearTimeout(_scrollTimeout);
			if (sendScrollComplete) {
				return $.Window.triggerHandler($.Events.SCROLL_COMPLETE, scrollData);
			}
		};
		_scroll = function(evt) {
			var scrollData;
			scrollData = {
				scrollDistance: 0,
				scrollDirection: -1,
				scrollSpeed: 0
			};
			if ($.MobileDevice || $.Tablet) {
				return;
			}
			if (sendScrollComplete == null) {
				evt.preventDefault();
			}
			scrollData.scrollDistance = Math.abs($.Window.scrollTop() - lastScrollTop);
			scrollData.scrollSpeed = (scrollData.scrollDistance / $.Body.height()) * 50000;
			if (lastScrollTop < $.Window.scrollTop()) {
				scrollData.scrollDirection = 1;
			} else {
				scrollData.scrollDirection = -1;
			}
			if (lastScrollTop === $.Window.scrollTop()) {
				scrollData.scrollDirection = 0;
			}
			lastScrollTop = $.Window.scrollTop();
			scrollData.scrollTop = lastScrollTop;
			if (scrollData.scrollDirection === -1 && lastScrollDirection > -1 && scrollData.scrollDistance > config.backScrollLimit) {
				lastScrollDirection = -1;
				_triggerBackScroll(scrollData);
			}
			if (scrollData.scrollDistance > config.backScrollLimit) {
				lastScrollDirection = scrollData.scrollDirection;
			}
			if (_scrollTimeout != null) {
				clearTimeout(_scrollTimeout);
			}
			return _scrollTimeout = setTimeout(function() {
				return _triggerScrollComplete(scrollData);
			}, 300);
		};
		_triggerBackScroll = function(scrollData) {
			if (sendBackScroll) {
				return $.Window.triggerHandler($.Events.BACK_SCROLL, scrollData);
			}
		};
		_createOverlay = function(evt, message, unique_name) {
			var _overlayElement;
			_overlayElement = $('#overlay-template').clone();
			_overlayElement.id(name);
			return $.Body.append(_overlayElement);
		};
		_init = function() {
			debug("initializing site");
			debug("data objects to initialize [" + $('[data-script]').length + "]");
			if ($('[data-script]').length > 0) {
				$('[data-script]').Instantiate(defaults);
			}
			if (config.analyticsEnabled) {
				$.Body.GoogleAnalytics();
			}
			register($.Events.SCROLL, config.parentName, _scroll);
			return $(window).on('resize', _resize);
		};
		return _init();
	};
});

function initializeComponents(component) {

	var $me = $('[data-component="' + component + '"]');

	if ($me.length == 0) {
		$me = $('[data-id="' + component + '"]');
	}

	setTimeout(function() {
		$me.find('[data-script]').Instantiate();
	}, 1);
}

function hideMobileNavBar()  {
	if (navigator.userAgent.indexOf('iPhone') !== -1 || navigator.userAgent.indexOf('Android') !== -1) {
		return addEventListener("load", function() {
			return setTimeout(hideURLbar, 0);
		}, false);
	}  
}

_docReady = function(evt) {
	debug("document ready");
	$('body').Site("Site", defaults);
};

$(document).ready(_docReady);